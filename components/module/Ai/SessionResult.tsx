import customAxios from '@/lib/axios';
import { COLORS } from '@/styles/color';
import { TYPOGRAPHY } from '@/styles/typography';
import styled from '@emotion/styled';
import { useQuery } from '@tanstack/react-query';
import Image from 'next/image';
import { useRouter, useSearchParams } from 'next/navigation';
import { useEffect, useState } from 'react';
import toast from 'react-hot-toast';

const PLAN_ARRAY: {
  from: string;
  to: string;
  title?: string;
  content: string[];
}[] = [
  {
    from: '7Ïõî',
    to: '12Ïõî',
    title: 'Í∞úÎÖê ÌïôÏäµ Î∞è Í∏∞Ï¥à Î¨∏Ï†ú ÌíÄÏù¥',
    content: [
      'Ïö∞ÏÑ† Í≥†Îì±ÌïôÍµê 1ÌïôÎÖÑ, 2ÌïôÎÖÑ Í≥ºÏ†ïÏùò ÏàòÌïô Í∞úÎÖêÏùÑ Î≥µÏäµÌïòÎ©¥ÏÑú Í∏∞Ï¥àÎ•º Îã§Ï†∏Î¥ê. Í∑∏Î¶¨Í≥† ÎÇòÏÑú ÏàòÎä• ÏàòÌïô Í≥µÌÜµÍ≥ºÎ™©Ïù∏ ÏàòÌïôI, ÏàòÌïôIIÏùò Í∞úÎÖêÏùÑ ÌïôÏäµÌïòÏûê.',
      'Í∞úÎÖê ÌïôÏäµ Ïù¥ÌõÑÏóêÎäî Ïâ¨Ïö¥ ÎÇúÏù¥ÎèÑÏùò Î¨∏Ï†úÏßëÏùÑ Í≥®ÎùºÏÑú Î¨∏Ï†úÎ•º ÌíÄÎ©¥ÏÑú Í∞úÎÖêÏùÑ Ï†ÅÏö©ÌïòÎäî Ïó∞ÏäµÏùÑ ÌïòÎ©¥ Îèº. ÌãÄÎ¶∞ Î¨∏Ï†úÎäî Î∞òÎìúÏãú Îã§Ïãú ÌíÄÏñ¥Î≥¥Í≥† Ïôú ÌãÄÎ†∏ÎäîÏßÄ Ïù¥Ïú†Î•º ÌååÏïÖÌï¥Ïïº Ìï¥.',
    ],
  },
  {
    from: '1Ïõî',
    to: '6Ïõî',
    title: 'Ïã¨Ìôî Í∞úÎÖê ÌïôÏäµ Î∞è ÌÇ¨Îü¨ Î¨∏Ìï≠ ÎåÄÎπÑ',
    content: [
      'Ïù¥Ï†úÎ∂ÄÌÑ∞Îäî Ï°∞Í∏à Îçî Ïñ¥Î†§Ïö¥ Î¨∏Ï†úÏßëÏù¥ÎÇò Î™®ÏùòÍ≥†ÏÇ¨Î•º ÌíÄÎ©¥ÏÑú Ïã¨Ìôî Í∞úÎÖêÏùÑ ÌïôÏäµÌïòÎ©¥ Ï¢ãÏïÑ. ÌäπÌûà ÏÉÅÏúÑÍ∂å ÎåÄÌïôÏùÑ Î™©ÌëúÎ°ú ÌïúÎã§Î©¥ ÌÇ¨Îü¨ Î¨∏Ìï≠ ÎåÄÎπÑÎèÑ ÌïÑÏàòÏïº.',
      'Ïù∏Í∞ïÏù¥ÎÇò ÌïôÏõê ÏàòÏóÖÏùÑ ÌôúÏö©Ìï¥ÎèÑ Í¥úÏ∞ÆÏïÑ. ÏûêÏã†ÏóêÍ≤å ÎßûÎäî Î∞©Î≤ïÏùÑ Ï∞æÏïÑÏÑú Íæ∏Ï§ÄÌûà Í≥µÎ∂ÄÌïòÎèÑÎ°ù ÌïòÏûê.',
    ],
  },
  {
    from: '7Ïõî',
    to: '12Ïõî',
    title: 'Î™®ÏùòÍ≥†ÏÇ¨ Ïó∞Ïäµ Î∞è ÏïΩÏ†ê Î≥¥ÏôÑ',
    content: [
      'Ïù¥ Í∏∞Í∞ÑÏóêÎäî Îß§Ï£º Ï£ºÎßêÎßàÎã§ Î™®ÏùòÍ≥†ÏÇ¨Î•º ÌíÄÎ©¥ÏÑú Ïã§Ï†Ñ Í∞êÍ∞ÅÏùÑ ÏùµÌòÄÎ≥¥Ïûê. ÏÑ±Ï†ÅÏù¥ Ïûò ÎÇòÏò§ÏßÄ ÏïäÎäî Î∂ÄÎ∂ÑÏùÄ Îî∞Î°ú Ï≤¥ÌÅ¨Ìï¥ÏÑú Î≥¥ÏôÑÌïòÎäî Í≤å Ï§ëÏöîÌï¥.',
      'ÌãÄÎ¶∞ Î¨∏Ï†úÎÇò Ïñ¥Î†§Ïõ†Îçò Î¨∏Ï†úÎäî Ïò§ÎãµÎÖ∏Ìä∏Î•º ÎßåÎì§Ïñ¥ÏÑú Ï†ïÎ¶¨ÌïòÎ©¥ ÎÇòÏ§ëÏóê ÎèÑÏõÄÏù¥ Îê† Í±∞Ïïº.',
    ],
  },
  {
    from: '1Ïõî',
    to: '6Ïõî',
    title: 'ÏµúÏ¢Ö ÎßàÎ¨¥Î¶¨ Î∞è Ïª®ÎîîÏÖò Í¥ÄÎ¶¨',
    content: [
      'ÎßàÏßÄÎßâÏúºÎ°ú ÏßÄÍ∏àÍπåÏßÄ Í≥µÎ∂ÄÌïú ÎÇ¥Ïö©ÏùÑ Ï¥ùÏ†ïÎ¶¨ÌïòÎ©¥ÏÑú Î∂ÄÏ°±Ìïú Î∂ÄÎ∂ÑÏùÑ Ï±ÑÏõåÎÇòÍ∞ÄÎ©¥ Îèº. ÏÉàÎ°úÏö¥ ÎÇ¥Ïö©ÏùÑ Í≥µÎ∂ÄÌïòÍ∏∞Î≥¥Îã§Îäî Í∏∞Ï°¥Ïóê ÌïôÏäµÌïú ÎÇ¥Ïö©ÏùÑ Î≥µÏäµÌïòÎäî Îç∞ ÏßëÏ§ëÌïòÎäîÍ≤å Ï¢ãÏïÑ.',
      'ÏàòÎä• ÎãπÏùºÏóêÎäî ÏµúÏÉÅÏùò Ïª®ÎîîÏÖòÏùÑ Ïú†ÏßÄÌï† Ïàò ÏûàÎèÑÎ°ù Í∑úÏπôÏ†ÅÏù∏ ÏÉùÌôúÏäµÍ¥ÄÏùÑ Ïú†ÏßÄÌïòÍ≥† Í±¥Í∞ïÍ¥ÄÎ¶¨ÏóêÎèÑ Ïã†Í≤ΩÏç®Ïïº ÌïúÎã§Îäî Í±∏ ÏûäÏßÄ Îßà.',
    ],
  },
];

const SessionResult = () => {
  const params = useSearchParams();
  const router = useRouter();
  const [planData, setPlanData] = useState<{
    intro: string;
    outro: string;
    planList: {
      content: string;
      endDate: string;
      startDate: string;
      title: string;
    }[];
    resultId: number;
  }>({
    intro: '',
    outro: '',
    planList: [],
    resultId: 0,
  });

  // Queries
  const { isLoading, data } = useQuery({
    queryKey: ['resumes', params.get('session_id')],
    queryFn: () => {
      return customAxios({
        method: 'GET',
        url: `/sky/result/${params.get('session_id')}`,
      }).then((res) => res.data);
    },
    enabled: !!params.get('session_id'),
  });

  const shareContent = async () => {
    const shareData: ShareData = {
      title: 'ÎßûÏ∂§ ÌïôÏäµ Í≥ÑÌöç Í≤∞Í≥º - Ïä§Ïπ¥Ïù¥Î∏åÎ¶øÏßÄ',
      text: 'ÎßûÏ∂§ ÌïôÏäµ Í≥ÑÌöç Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî!',
      url: `${window.location.origin}/ai/read?session_id=${params.get('session_id')}`,
    };

    // Î™®Î∞îÏùº Î∏åÎùºÏö∞Ï†ÄÏùò Ïª§Î≤ÑÎ¶¨ÏßÄÎäî 85% Ï†ïÎèÑ,
    // ÎÇòÎ®∏ÏßÄ 15%Îäî ÌÅ¥Î¶ΩÎ≥¥ÎìúÎ°ú Î≥µÏÇ¨ÌïòÎäî Î∞©ÏãùÏúºÎ°ú ÎåÄÏùë
    // TODO: ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Î∏åÎùºÏö∞Ï†ÄÏóê ÎåÄÌïú fallback Ï≤òÎ¶¨
    // ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Î∏åÎùºÏö∞Ï†Ä -> Android webview, Firefox for Android

    // navigator.share APIÎ•º ÏßÄÏõêÌïòÎäî Î∏åÎùºÏö∞Ï†ÄÏù∏ÏßÄ ÌôïÏù∏
    // ÌòÑÏû¨ Î∏åÎùºÏö∞Ï†Ä Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÎäî Î∞©Î≤ïÏùÄ?
    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator

    // ÌòÑÏû¨ Î∏åÎùºÏö∞Ï†ÄÍ∞Ä Android webview ÎòêÎäî Firefox for AndroidÏù∏ Í≤ΩÏö∞
    if (
      navigator.userAgent.includes('wv') &&
      navigator.userAgent.includes('Android')
    ) {
      copyToClipboard(shareData.url || '');
      return;
    }

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (error) {
        console.error('Error sharing:', error);
      }
    } else {
      copyToClipboard(shareData.url || '');
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast.success('ü¶Ñ ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!');
    } catch (error) {
      console.error('Error copying to clipboard:', error);
    }
  };

  useEffect(() => {
    if (data) {
      setPlanData(data);
    }
  }, [data]);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <NavBox
        style={{
          ...TYPOGRAPHY.body['large1'],
        }}
      >
        <svg
          onClick={() => {
            router.back();
          }}
          style={{
            cursor: 'pointer',
          }}
          width="24"
          height="25"
          viewBox="0 0 24 25"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M14.998 19.5L7.99805 12.5L14.998 5.5"
            stroke="#1E1E1E"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
        </svg>
        ÎßûÏ∂§ ÌïôÏäµ Í≥ÑÌöç
        <svg
          onClick={() => {
            shareContent();
          }}
          style={{
            cursor: 'pointer',
          }}
          width="24"
          height="25"
          viewBox="0 0 24 25"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <rect
            x="7.5"
            y="7.1084"
            width="10.5"
            height="13.3913"
            rx="0.75"
            stroke="#1E1E1E"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
          <path
            d="M5 18.0652V6.75C5 5.50736 6.00736 4.5 7.25 4.5H14.1667"
            stroke="#1E1E1E"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
        </svg>
      </NavBox>
      <Wrapper>
        <div
          style={{
            width: '200px',
            height: '224px',
            position: 'relative',
          }}
        >
          <Image
            src={
              'https://imagedelivery.net/6qzLODAqs2g1LZbVYqtuQw/fe2d3c33-2d1f-4289-e5b4-acfc9ca71200/public'
            }
            alt="gurumi"
            fill
            priority
            sizes="410px"
          />
        </div>
      </Wrapper>
      <Description
        style={{
          ...TYPOGRAPHY.title['medium'],
          color: COLORS.primary[600],
          lineHeight: '29px',
        }}
      >
        {planData.intro}
      </Description>
      <ScheduleBox>
        {planData.planList.map((plan, index) => (
          <div
            key={index}
            style={{
              width: '100%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '7px',
            }}
          >
            <div
              style={{
                ...TYPOGRAPHY.body['medium1'],
                textAlign: 'center',
                backgroundColor: COLORS.primary[50],
                color: COLORS.primary[600],
                borderRadius: '10px',
                padding: '14px 0',
                display: 'flex',
                justifyContent: 'flex-start',
                alignItems: 'center',
                flexDirection: 'column',
                width: '82px',
                height: '100%',
              }}
            >
              <div>{plan.startDate}</div>
              <div
                style={{
                  padding: '1px 0',
                }}
              >
                <svg
                  width="5"
                  height="2"
                  viewBox="0 0 5 2"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M4.72852 0.282227V1.71777H0.271484V0.282227H4.72852Z"
                    fill="#6178C8"
                  />
                </svg>
              </div>

              <div>{plan.endDate}</div>
            </div>
            <div
              style={{
                ...TYPOGRAPHY.body['medium1'],
                flex: 1,
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'flex-start',
                justifyContent: 'flex-start',
                backgroundColor: COLORS.grayscale[50],
                minHeight: '52px',
                height: 'fit-content',
                borderRadius: '10px',
                padding: '14px 12px',
                color: '#1E1E1E',
              }}
            >
              <div>{plan.title}</div>
              {plan.content && (
                <div
                  style={{
                    ...TYPOGRAPHY.body['medium2'],
                    color: 'black',
                    padding: '5px 0',
                  }}
                >
                  {plan.content}
                </div>
              )}
            </div>
          </div>
        ))}
      </ScheduleBox>
      <Description
        style={{
          ...TYPOGRAPHY.title['medium'],
          color: COLORS.primary[600],
          lineHeight: '29px',
        }}
      >
        {planData.outro}
      </Description>
    </>
  );
};

export default SessionResult;

const Wrapper = styled.div`
  flex: 1;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  position: relative;
  padding-top: 50px;
  gap: 10px;
`;

const NavBox = styled.div`
  width: 100%;
  height: 57px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: sticky;
  top: 0;
  z-index: 100;
`;

const Description = styled.div`
  width: 100%;
`;

const ScheduleBox = styled.div`
  width: 100%;
  gap: 10px;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  scrollbar-width: none;
  -ms-overflow-style: none;
  ::-webkit-scrollbar {
    display: none;
  }
`;
